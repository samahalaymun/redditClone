import Image from "next/image";
import Head from "next/head";
import { Inter } from "next/font/google";
import { NextPage } from "next";
import PageContent from "../components/Layout/PageContent";
import { useAuthState } from "react-firebase-hooks/auth";
import { auth, firestore } from "../firebase/clientApp";
import { useEffect, useState } from "react";
import {
  collection,
  getDocs,
  limit,
  orderBy,
  query,
  where,
} from "firebase/firestore";
import { Post, PostVote } from "../atoms/PostsAtom";
import UsePosts from "../hooks/usePosts";
import CreatePostLink from "../components/Community/CreatePostLink";
//import { PostItem } from "../components/Posts/PostItem";
import { Stack } from "@chakra-ui/react";

import { useRecoilValue } from "recoil";
import { CommunityState } from "../atoms/communitiesAtoms";
import useCommunityData from "../hooks/useCommunityData";
import { Recommendations } from "../components/Community/Recommendations";
import Premium from "../components/Community/Premium";
import PersonalHome from "../components/Community/PersonalHome";
import { Footer } from "../components/Footer";
import PostLoader from "../components/Posts/PostLoader";
import dynamic from "next/dynamic";

const PostItem = dynamic(() =>
  import("../components/Posts/PostItem").then((mod) => mod.PostItem)
);

const inter = Inter({ subsets: ["latin"] });

const Home: NextPage = () => {
  const [user, loadingUser] = useAuthState(auth);
  //const [loading,setLoading]=useState(false);
  const {
    postStateValue,
    setPostStateValue,
    onVote,
    onSelectPost,
    onDeletePost,
    loading,
    setLoading,
  } = UsePosts();
  const {communityStateValue} = useCommunityData();

  const buildUserHomeFeed =async () => {
    setLoading(true);
    try {
      if (communityStateValue.mySnippets.length) {
        const myCommunityIds = communityStateValue.mySnippets.map(
          (snippet) => snippet.communityId
        );
        const postQuery = query(
          collection(firestore, "posts"),
          where("communityId", "in", myCommunityIds)
        );
          const postDocs = await getDocs(postQuery);
          const posts = postDocs.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
          })) as Post[];
          setPostStateValue((prev) => ({
            ...prev,
            posts: posts,
          }));
      }else{
        buildNoUserHomeFeed();
      }
    } catch (error: any) {
      console.log(error.message);
    }
    setLoading(false);
  };
  const buildNoUserHomeFeed = async () => {
    setLoading(true);
    try {
      const feedPosts: Post[] = [];

      const postQuery = query(
        collection(firestore, "posts"),
        orderBy("voteStatus", "desc")
      );
      const postDocs = await getDocs(postQuery);
      const posts = postDocs.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      })) as Post[];
      feedPosts.push(...posts);
     
      setPostStateValue((prev) => ({
        ...prev,
        posts: feedPosts,
      }));
    } catch (error: any) {
      console.log("error is" + error.message);
    }
    setLoading(false);
  };
  const getUserPostVotes = async() => {
    
    try {
      const postIds = postStateValue.posts.map(post=>post.id);
      const postVotesQuery = query(
        collection(firestore, `users/${user?.uid}/postVotes`),
        where("postId", "in", postIds)
      );
      const postVoteDocs = await getDocs(postVotesQuery);
       const postVotes = postVoteDocs.docs.map((doc) => ({
         id: doc.id,
         ...doc.data(),
       }));
       setPostStateValue((prev) => ({
         ...prev,
         postVotes: postVotes as PostVote[],
       }));
    } catch (error:any) {
      console.log("getUserPostVotes error "+error.message)
    }
  };

  useEffect(() => {
    if (communityStateValue.snippetsFetched){
       buildUserHomeFeed();
    } 
  }, [communityStateValue.snippetsFetched]);

  useEffect(() => {
    if (!user && !loadingUser) buildNoUserHomeFeed();
  }, [user, loadingUser]);

  useEffect(()=>{
    if(user && postStateValue.posts.length){
      getUserPostVotes();
    }
    return ()=>{
      setPostStateValue(prev=>({
        ...prev,
        postVotes:[],

      }))
    }
  },[user,postStateValue.posts])
  return (
    <>
      <Head>
        <title>Reddit - Dive into anything</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/images/redditFace.svg" />
      </Head>
      <PageContent>
        <>
          <CreatePostLink />
          {loading ? (
            <PostLoader />
          ) : (
            <Stack spacing={2}>
              {postStateValue &&
                postStateValue.posts.map((post) => (
                  <PostItem
                    key={post.id}
                    onDeletePost={onDeletePost}
                    onSelectPost={onSelectPost}
                    post={post}
                    onVote={onVote}
                    userIsCreator={user?.uid === post.creatorId}
                    userVoteValue={
                      postStateValue.postVotes.find(
                        (item) => item.postId === post.id
                      )?.voteValue
                    }
                    homePage={true}
                  />
                ))}
            </Stack>
          )}
        </>
        <>
          <Stack spacing={5} position="sticky" top="14px" width="100%">
            <Recommendations />
            <Premium />
            <PersonalHome />
            <Footer />
          </Stack>
        </>
      </PageContent>
    </>
  );
};
export default Home;
